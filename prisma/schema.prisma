datasource db {
  provider = "mysql"
  // url      = "mysql://admin:nFU4xub2Oul0@database-lvn.cluster-crymktbnf4bw.ap-northeast-1.rds.amazonaws.com:3306/dev?schema=public"
  url      = "mysql://admin:nFU4xub2Oul0@luvina-database.crymktbnf4bw.ap-northeast-1.rds.amazonaws.com:3306/dev?schema=public"
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

generator appsync {
  provider = "prisma-appsync"
}

// generator typegraphql {
//   provider = "typegraphql-prisma"
// }

// generator dbml { 
model zoomAccount {
  id     String  @id
  call   call?   @relation(fields: [callId], references: [id])
  callId String? @unique
}

model call {
  id              String       @id @default(uuid())
  number          String       @unique
  zoomAccount     zoomAccount?
  password        String
  createdBy       user         @relation(fields: [userId], references: [id])
  expiration      DateTime
  comment         comment[]    @relation("comment")
  pinnedCommentId String?
  question        qA[]
  poll            poll[]
  userId          String
  record          Boolean?
  commentBan      Boolean      @default(false)
}

model comment {
  id        String   @id @default(uuid())
  message   String
  timeStamp DateTime
  call      call     @relation("comment", fields: [callId], references: [id])
  callId    String
  user      user     @relation(fields: [userid], references: [id])
  userid    String
}

model qA {
  id         String   @id @default(uuid())
  question   String
  answer     String?
  timeStamp  DateTime
  tick       Boolean  @default(false)
  user       user     @relation("question", fields: [userid], references: [id])
  userid     String
  answerer   user?    @relation("answer", fields: [answererid], references: [id])
  answererid String?
  call       call     @relation(fields: [callId], references: [id])
  callId     String
}

model user {
  id       String    @id @default(uuid())
  name     String
  position Role
  Comment  comment[]
  QA       qA[]      @relation("question")
  QAanswer qA[]      @relation("answer")
  Call     call[]
}

model poll {
  id        String   @id @default(uuid())
  question  String
  timeStamp DateTime
  call      call?    @relation(fields: [callId], references: [id])
  callId    String?
  released  Boolean  @default(false)
  stop      Boolean  @default(false)
  Answer    answer[]
}

model answer {
  id         String @id @default(uuid())
  answer     String
  noOfAnswer Int    @default(0)
  poll       poll   @relation(fields: [pollId], references: [id])
  pollId     String
}

enum Role {
  Student
  Company0
  Company1
}
